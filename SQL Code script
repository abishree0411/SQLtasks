code
CREATE DATABASE library_system;
USE library_system;
CREATE TABLE Authors (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    bio TEXT
);
CREATE TABLE Books (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    isbn VARCHAR(13) UNIQUE,
    published_year INT,
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);
CREATE TABLE Members (
    member_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    join_date DATE DEFAULT (CURRENT_DATE)
);
CREATE TABLE Loans (
    loan_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    member_id INT,
    loan_date DATE DEFAULT (CURRENT_DATE),
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);
INSERT INTO Authors (name, bio) VALUES
('George Orwell', 'English novelist and social critic'),
('Jane Austen', 'English novelist known for romantic fiction'),
('Mark Twain', 'American writer and humorist');
INSERT INTO Books (title, author_id, isbn, published_year) VALUES
('1984', 1, '9780451524935', 1949),
('Animal Farm', 1, '9780451526342', 1945),
('Pride and Prejudice', 2, '9780141439518', 1813),
('Tom Sawyer', 3, '9780486400778', 1876);
INSERT INTO Members (name, email) VALUES
('John Smith', 'john@email.com'),
('Sarah Johnson', 'sarah@email.com'),
('Mike Brown', 'mike@email.com');
INSERT INTO Loans (book_id, member_id, loan_date) VALUES
(1, 1, '2024-06-01'),
(2, 2, '2024-06-15'),
(3, 1, '2024-06-20');
SELECT b.title, a.name AS author, b.isbn, b.published_year
FROM Books b
JOIN Authors a ON b.author_id = a.author_id;
SELECT m.name AS member, b.title AS book, l.loan_date
FROM Loans l
JOIN Members m ON l.member_id = m.member_id
JOIN Books b ON l.book_id = b.book_id
WHERE l.return_date IS NULL;
SELECT m.name AS member, COUNT(l.loan_id) AS total_books_borrowed
FROM Members m
LEFT JOIN Loans l ON m.member_id = l.member_id
GROUP BY m.member_id, m.name;
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);
![image_alt](
